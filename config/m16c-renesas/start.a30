;
;  TOPPERS Automotive Kernel
;      Toyohashi Open Platform for Embedded Real-Time Systems
;      Automotive Kernel
; 
;  Copyright (C) 2000-2003 by Embedded and Real-Time Systems Laboratory
;                              Toyohashi Univ. of Technology, JAPAN
;  Copyright (C) 2001 by OAKS16KIT support
;  Copyright (C) 2003-2004 by Naoki Saito
;             Nagoya Municipal Industrial Research Institute, JAPAN
;  Copyright (C) 2003-2004 by Ryosuke Takeuchi
;               Platform Development Center RIOCH COMPANY,LTD. JAPAN
;  Copyright (C) 2004-2006 by Witz Corporation, JAPAN
; 
;  上記著作権者は，Free Software Foundation によって公表されている 
;  GNU General Public License の Version 2 に記述されている条件か，以
;  下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェア（本ソフトウェ
;  アを改変したものを含む．以下同じ）を使用・複製・改変・再配布（以下，
;  利用と呼ぶ）することを無償で許諾する．
;  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
;      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
;      スコード中に含まれていること．
;  (2) 本ソフトウェアを再利用可能なバイナリコード（リロケータブルオブ
;      ジェクトファイルやライブラリなど）の形で利用する場合には，利用
;      に伴うドキュメント（利用者マニュアルなど）に，上記の著作権表示，
;      この利用条件および下記の無保証規定を掲載すること．
;  (3) 本ソフトウェアを再利用不可能なバイナリコードの形または機器に組
;      み込んだ形で利用する場合には，次のいずれかの条件を満たすこと．
;    (a) 利用に伴うドキュメント（利用者マニュアルなど）に，上記の著作
;        権表示，この利用条件および下記の無保証規定を掲載すること．
;    (b) 利用の形態を，別に定める方法によって，上記著作権者に報告する
;        こと．
;  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
;      害からも，上記著作権者を免責すること．
; 
;  本ソフトウェアは，無保証で提供されているものである．上記著作権者は，
;  本ソフトウェアに関して，その適用可能性も含めて，いかなる保証も行わ
;  ない．また，本ソフトウェアの利用により直接的または間接的に生じたい
;  かなる損害に関しても，その責任を負わない．
; 

;
;	カーネル用のスタートアップモジュール(OAKS16用)
;

;
;  セクション定義のインクルード
;
	.include sectm16c.inc

;	外部参照宣言
	.glb	hardware_init_hook
	.glb	software_init_hook
	.glb	_main

;
;  リセット後はここからプログラム開始
;
	.section	program, code, align

	.glb		_start

_start:
	;
	; スタックポインタの初期化
	;
	ldc			#STACK_TOP,ISP		; 割り込みスタックポインタセット
	ldc			#0000h,FLG		; bank#0,割り込み禁止,ISP

	;
	;  可変ベクタ先頭番地設定
	;
	ldintb		#VVECTOR_TOP	; ベクタテーブルの設定

	;
	;  hardware_init_hook の呼出し（0 でない場合）
	;
	;  ターゲットハードウェアに依存して必要な初期化処理がある場合
	;  は，hardware_init_hook という関数を用意する．
	;
	mov.b:s	#(hardware_init_hook>>010h), r0l	; 有効?(上位)
	jnz		hardware_init_hook_call
	mov.w:s	#(hardware_init_hook&0ffffh), a1	; 有効?(下位)
	jeq		hardware_init_hook_r
hardware_init_hook_call:
	jsr		hardware_init_hook
hardware_init_hook_r:

	;
	; bss領域のゼロクリア
	;
	mov.b:z	#0, r0l
	mov.w:s	#(topof bss_NE & 0ffffh), a1
	mov.w	#(sizeof bss_NE), r3
	sstr.b

	mov.w:s	#(topof bss_NO & 0ffffh), a1
	mov.w	#(sizeof bss_NO), r3
	sstr.b

	;
	; data領域の初期化
	;
	mov.w:s	#(topof data_NEI & 0ffffh), a0
	mov.b	#(topof data_NEI >> 16), r1h
	mov.w	#(topof data_NE), a1
	mov.w	#(sizeof data_NE), r3
	smovf.b

	mov.w:s	#(topof data_NOI & 0ffffh), a0
	mov.b	#(topof data_NOI >> 16), r1h
	mov.w	#(topof data_NO), a1
	mov.w	#(sizeof data_NO), r3
	smovf.b

	;
	;  software_init_hook を呼出し（0 でない場合）
	;
	;  ソフトウェア環境（特にライブラリ）に依存して必要な初期化処
	;  理がある場合は，software_init_hook という関数を用意すれば
	;  よい．
	;
	mov.b:s	#(software_init_hook>>010h), r0l	; 有効?(上位)
	jnz		software_init_hook_call
	mov.w:s	#(software_init_hook&0ffffh), a1	; 有効?(下位)
	jeq		software_init_hook_r
software_init_hook_call:
	jsr		software_init_hook
software_init_hook_r:

	;
	; ユーザーメインへ
	;
	jsr		_main

	;
	;  EXITループ
	;
main_exit:
	jmp.b	main_exit

	.end
