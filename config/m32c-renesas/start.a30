;
;  TOPPERS Automotive Kernel
;      Toyohashi Open Platform for Embedded Real-Time Systems
;      Automotive Kernel
; 
;  Copyright (C) 2000-2003 by Embedded and Real-Time Systems Laboratory
;                              Toyohashi Univ. of Technology, JAPAN
;  Copyright (C) 2003 by Naoki Saito
;             Nagoya Municipal Industrial Research Institute, JAPAN
;  Copyright (C) 2004 by Embedded and Real-Time Systems Laboratory
;              Graduate School of Information Science, Nagoya Univ., JAPAN
;  Copyright (C) 2004-2006 by Witz Corporation, JAPAN
; 
;  上記著作権者は，以下の (1)〜(4) の条件か，Free Software Foundation 
;  によって公表されている GNU General Public License の Version 2 に記
;  述されている条件を満たす場合に限り，本ソフトウェア（本ソフトウェア
;  を改変したものを含む．以下同じ）を使用・複製・改変・再配布（以下，
;  利用と呼ぶ）することを無償で許諾する．
;  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
;      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
;      スコード中に含まれていること．
;  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
;      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
;      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
;      の無保証規定を掲載すること．
;  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
;      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
;      と．
;    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
;        作権表示，この利用条件および下記の無保証規定を掲載すること．
;    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
;        報告すること．
;  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
;      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
; 
;  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
;  よびTOPPERSプロジェクトは，本ソフトウェアに関して，その適用可能性も
;  含めて，いかなる保証も行わない．また，本ソフトウェアの利用により直
;  接的または間接的に生じたいかなる損害に関しても，その責任を負わない．
; 
;

;
;  カーネル用のスタートアップモジュール(M32C用)
;

;
;  セクション定義のインクルード
;
	.include sectm32c.inc

;	外部参照宣言
	.glb	hardware_init_hook
	.glb	software_init_hook
	.glb	_main

	.section program, code

;
;  リセット後はここからプログラム開始
;
	.glb _start
_start:
	;
	;  割込みスタックポインタ初期化
	;
	ldc	#STACK_TOP, isp

	;
	;  可変ベクタ先頭番地設定
	;
	ldc	#VVECTOR_TOP, intb

	;
	;  hardware_init_hook の呼出し（0 でない場合）
	;
	;  ターゲットハードウェアに依存して必要な初期化処理がある場合
	;  は，hardware_init_hook という関数を用意する．
	;
	sub.w	r2, r2
	mova	hardware_init_hook, r2r0
	mov.l	r2r0, r2r0			; 有効？
	jeq		hardware_init_hook_r
	jsr		hardware_init_hook
hardware_init_hook_r:

	;
	;  bss領域のゼロクリア
	;
	mov.b	#0, r0l
	mov.w	#(topof bss_NE & 0ffffh), a1
	mov.w	#(sizeof bss_NE) , r3
	sstr.b
	mov.w	#(topof bss_NO & 0ffffh), a1
	mov.w	#(sizeof bss_NO) , r3
	sstr.b
	;

	;
	;  data領域の初期化
	;
	mov.l	#(topof data_NEI), a0
	mov.l	#(topof data_NE), a1
	mov.w	#(sizeof data_NE), r3
	smovf.b
	mov.l	#(topof data_NOI), a0
	mov.l	#(topof data_NO), a1
	mov.w	#(sizeof data_NO), r3
	smovf.b

	;
	;  software_init_hook を呼出し（0 でない場合）
	;
	;  ソフトウェア環境（特にライブラリ）に依存して必要な初期化処
	;  理がある場合は，software_init_hook という関数を用意すれば
	;  よい．
	;
	sub.w	r2, r2
	mova	software_init_hook, r2r0
	mov.l	r2r0, r2r0			; 有効？
	jeq		software_init_hook_r
	jsr		software_init_hook
software_init_hook_r:

	;
	;  ユーザーメイン関数へジャンプ
	;
	jsr _main

	;
	;  EXITループ
	;
main_exit:
	jmp		main_exit

	.end
